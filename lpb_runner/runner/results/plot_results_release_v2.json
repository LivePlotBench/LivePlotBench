[
  {
    "prompt": "Please create a beautiful scatter plot based on the sample data provided, showing the relationship between mean age (meanAge) and bimodality. Use different colors for the points based on the concentration number (number), and include a legend.",
    "data_path": "lpb_runner\\runner\\testset\\bimodality.xlsx",
    "plot_code": "# Set global matplotlib settings\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style='whitegrid')\nplt.rcParams.update({'font.size': 14})\n\n# Define global plot parameters\nGLOBAL_FONT_SIZE = 14\nplt.rc('font', size=GLOBAL_FONT_SIZE)\n\n# Define matplotlib color palette\nsns.set_palette('hls', 3)\n\n# Select x-axis and y-axis\nselected_xaxis = 'meanAge'\nselected_yaxis = 'bimodality'\n\n# Set labels\nX_LABEL = 'Mean Age'\nY_LABEL = 'Bimodality'\n\n# Colour based on 'number'\ncolor_column = 'number'\n\n# calculate the data RANGE\ndata_range = df[selected_yaxis].max() - df[selected_yaxis].min()\n\n# Set figure size\nfig, ax = plt.subplots(figsize=(12,8))\n\n# Create scatter plot\nscatter = sns.scatterplot(data=df, x=selected_xaxis, y=selected_yaxis, hue=color_column, palette='hls', s=100, edgecolor=None)\n\n# Set x-axis and y-axis labels\nplt.ylabel(Y_LABEL)\nplt.xlabel(X_LABEL)\n\n# Adjust y-axis limit to 1.3 times data range\nplt.ylim(0, df[selected_yaxis].max() * 1.3)\n\n# Set a title\nplt.title(f'Scatter plot of {Y_LABEL} vs. {X_LABEL}', fontsize=GLOBAL_FONT_SIZE)\n\n# Add a legend\nplt.legend(title='Concentration', loc='upper right')\n\n# Optimize the layout\nplt.tight_layout()\n\n# Save the figure in the 'fig' variable\nfig = ax.get_figure()",
    "runable": true,
    "plot_path": "lpb_runner\\runner\\plots\\1.png"
  },
  {
    "prompt": "Please create a histogram based on the housing data provided, showing the distribution of house ages (HouseAge). Set appropriate bin widths and add a title and axis labels.",
    "data_path": "lpb_runner\\runner\\testset\\california.xlsx",
    "plot_code": "# Import necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\n# Set global settings\nsns.set(style=\"whitegrid\")\nplt.rcParams[\"figure.figsize\"] = [10, 8]\nGLOBAL_FONT_SIZE = 14\nplt.rc('font', size=GLOBAL_FONT_SIZE)\n\n# Define plot parameters\nX_LABEL = 'House Age'\nY_LABEL = 'Frequency'\nHIST_TITLE = 'Distribution of House Ages'\n\n# Compute number of bins using Square-root choice\nnum_bins = int(np.sqrt(len(df['HouseAge'])))\n\n# Create histogram\nfig, ax = plt.subplots()\nsns.histplot(data = df, x = \"HouseAge\", bins=num_bins, color='#2E8B57', edgecolor = 'black')\n\n# Set labels and title\nax.set_xlabel(X_LABEL)\nax.set_ylabel(Y_LABEL)\nax.set_title(HIST_TITLE)\n\n# Enhance grid visibility\nax.grid(alpha=0.3)\n\n# Save the figure to 'fig' object\nfig = ax.get_figure()",
    "runable": true,
    "plot_path": "lpb_runner\\runner\\plots\\2.png"
  },
  {
    "prompt": "Please create a clear confusion matrix heatmap based on the provided predicted (y_pred) and true values (y_true). Use color intensity to represent the count and annotate the values in each cell.",
    "data_path": "lpb_runner\\runner\\testset\\confusion_matrix_data.xlsx",
    "plot_code": "import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import confusion_matrix\n\n# Set matplotlib global settings\nplt.rcParams.update({\n    \"text.usetex\": False,\n    \"font.family\": \"serif\",\n    \"legend.fontsize\": 12,\n    \"axes.labelsize\": 16,\n    \"axes.titlesize\": 20,\n    \"xtick.labelsize\": 14,\n    \"ytick.labelsize\": 14,\n})\n\n# Define global plot parameters\nGLOBAL_FONT_SIZE = 14\nsns.set_palette('hls')  # Set color palette for seaborn\n\n# Set target columns for confusion matrix computation\ny_true = df['y_true']\ny_pred = df['y_pred']\n\n# Generate confusion matrix\ncm = confusion_matrix(y_true, y_pred)\n\n# Define figure size and axes\nfig, ax = plt.subplots(figsize=(6, 6))\n\n# Generate heatmap\nsns.heatmap(cm, annot=True, fmt='d', cmap='YlGnBu', ax=ax)\n\n# Setting the labels\nax.set_xlabel('Predicted labels')\nax.set_ylabel('True labels')\nax.set_title('Confusion Matrix')\n\n# Plot layout and final adjustments\nplt.tight_layout()\nfig = ax.get_figure()",
    "runable": true,
    "plot_path": "lpb_runner\\runner\\plots\\3.png"
  },
  {
    "prompt": "Please create a bar chart based on the concentration and percentage data provided, showing the percentage (percentage) corresponding to different concentrations (concentration). Use different colors for each bar and include a legend and title.",
    "data_path": "lpb_runner\\runner\\testset\\h2o2.xlsx",
    "plot_code": "import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import ttest_ind\n\n# Set matplotlib global settings\nsns.set(style=\"whitegrid\", palette=\"hls\", color_codes=True)\nplt.rc('font', size=14)\n\n# Define global plot parameters\nGLOBAL_FONT_SIZE = 14\nsns.set_palette(\"hls\")  # set matplotlib plot_color_palette to hls_style_palette\n\n# Assume that the 'Unnamed: 1' column and 'Unnamed: 0' column are 'concentration' and 'Percentage', respectively.\nselected_yaxis = 'Unnamed: 1'\nVALUE = 'Unnamed: 0'\n\n#Save the column names into simple variables for usage\nX_LABEL = 'Percentage'\nY_LABEL = 'concentration'\n\n# Control group is the first unique value in the selected_yaxis column\ncontrol_group = df[selected_yaxis].unique()[0]\n\n# calculate the range and define related variables\ndata_RANGE = df[VALUE].max() - df[VALUE].min()\nBAR_CAP_SIZE = 0.1 * data_RANGE\nYMAX = 1.3 * data_RANGE\nY_AXIS_LIMIT = [0, YMAX]\n\n# Figure settings\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Plot the data\nsns.barplot(data=df, x=VALUE, y=selected_yaxis, capsize=BAR_CAP_SIZE, ax=ax)\n\nax.set_xlabel(X_LABEL, fontsize=GLOBAL_FONT_SIZE)\nax.set_ylabel(Y_LABEL, fontsize=GLOBAL_FONT_SIZE)\nax.set_ylim(Y_AXIS_LIMIT)\n\n# Adding data points on the bars\nsns.swarmplot(data=df, x=VALUE, y=selected_yaxis, color=\".25\")\n  \n# set the y-axis to 1.3 times the data range\nax.set_ylim(0, YMAX)\n\nplt.tight_layout()\nfig = ax.get_figure()",
    "runable": false,
    "plot_path": "Error executing plot code: '>=' not supported between instances of 'float' and 'str'"
  },
  {
    "prompt": "Please create a line plot based on the statistical data provided, showing the trend of concentric number (Concentric number) and mean age (meanAge). Mark the data points and include a legend and grid lines.",
    "data_path": "lpb_runner\\runner\\testset\\long.xlsx",
    "plot_code": "# Step 2: Set matplotlib global setting and import necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Step 3: Define global parameters and plot_color_palette\nGLOBAL_FONT_SIZE = 14\nplt.rc('font', size=GLOBAL_FONT_SIZE)\nplt.rc('axes', titlesize=GLOBAL_FONT_SIZE)\nsns.set_palette('hls', 3)\n\n# Step 4: Set 'Concentration' as group column and 'meanAge' as value column\nGROUP = 'Concentration'\nVALUE = 'meanAge'\n\n# Step 6: Set x-axis and y-axis labels, and control group\nX_LABEL = 'Concentration'\nY_LABEL = 'meanAge'\ncontrol_group = df[GROUP].iloc[0]\n\n# Step 7: Calculate data range, set figure size\ndata_range = df[VALUE].max() - df[VALUE].min()\nfig_size=(8,6)\n\n# Step 9,10,11: Set figure size and plot a lineplot with data points \nfig, ax = plt.subplots(figsize=fig_size)\nsns.lineplot(data=df, x=GROUP, y=VALUE, marker=\"o\", sort=False)\nplt.grid()\n\n# Step 12: Set y-axis limit\nymax = df[VALUE].max() + 0.3 * data_range\nplt.ylim(0, ymax)\n\n# Step 13: Set plot title, x-axis and y-axis labels\nplt.title(f\"Trend of {X_LABEL} and {Y_LABEL}\")\nplt.xlabel(X_LABEL)\nplt.ylabel(Y_LABEL)\n\n# Add legend manually\nplt.legend(title='Concentration', title_fontsize = '13', labels=df[GROUP].unique())\n\n# Step 11 and 12: Set plt tight layout and get fig object\nplt.tight_layout()\nfig = ax.get_figure()",
    "runable": true,
    "plot_path": "lpb_runner\\runner\\plots\\5.png"
  }
]