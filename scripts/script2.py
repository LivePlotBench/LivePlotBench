import argparse
import json
import sys
from pathlib import Path
import pandas as pd

def parse_arguments():
    parser = argparse.ArgumentParser(description = "Execute the code generated by the llm and save the generated image")
    parser.add_argument("--input", required = True, help = "file path")
    return parser.parse_args()

def get_llm_completion():
    llm_result = sys.stdin.read().strip()
    if not llm_result:
        print(json.dumps({"Code": 0, "Error": "llm doesn't return code"}))
        sys.exit(1)
    try:
        llm_code = json.loads(llm_result)
        return llm_code["llm_completion"]
    except Exception as e:
        print(json.dumps({"Code": 0, "Error": f"Unable to parse data:{e}"}))
        sys.exit(1)

def execute_code(llm_completion, input_path):
    exec_env = {}
    if input_path:
        try:
            df = pd.read_excel(input_path)
            exec_env["df"] = df
        except Exception as e:
            print(json.dumps({"Code": 0, "Error": f"Failed to read  file: {e}" }))
            sys.exit(1)
    else:
        print("If no file is provided, no df variable will be generated", file=sys.stderr)
        
    try:
        exec(llm_completion, exec_env)
    except Exception as e:
        print(json.dumps({"Code": 0, "Error": f"Error while executing generated code: {e}"}))
        sys.exit(1)
    return exec_env

def save_plot(exec_env, input_path):
    if "fig" in exec_env:
        fig = exec_env["fig"]

        output_folder = Path(__file__).resolve().parent.parent / "generate plot"
        output_folder.mkdir(parents=True, exist_ok=True)
        if input_path:
            base_name = Path(input_path).name  
            output_file_name = base_name + ".png"  
        else:
            output_file_name = "generated_plot.png"
        output_path = output_folder / output_file_name
        try:
            fig.savefig(str(output_path), dpi=300)
            print(f"Figure successfully saved into the folder: {output_folder}", file=sys.stderr)
            return {"Code": 100, "plot_file": str(output_path)}
        except Exception as e:
            return {"Code": 0, "Error": f"Failed to save image: {e}"}
    else:
        return {"Code": 0, "Error": "No fig object found in generated code"}

def main():
    args = parse_arguments()
    llm_completion = get_llm_completion()
    exec_env = execute_code(llm_completion, args.input)
    result = save_plot(exec_env, args.input)
    print(json.dumps(result))

if __name__ == "__main__":
    main()
